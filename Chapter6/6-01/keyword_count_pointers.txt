/**
 * Exercise 6-01, page 112
 * Упражнение 6.01, страница 147
 *
 * Our version of getword does not properly handle underscores, string
 * constants, comments, or preprocessor control lines. Write a better version.
 *
 * Наша версия getword не умеет корректно обрабатывать знаки подчеркивания,
 * строковые константы, комментарии и управляющие строки
 * препроцессора. Усовершенствуйте эту функцию соответствующим образом.
 */

#include <stdio.h>
#include <ctype.h>
#include <string.h>

#define MAXWORD 100
#define NKEYS (sizeof keytab / sizeof keytab[0])

struct key {
	char *word;
	int count;
} keytab [] = {
	/** original words */
	{"auto", 0},
	{"break", 0},
	{"case", 0},
	{"char", 0},
	{"const", 0},
	{"continue", 0},
	{"default", 0},
	/* ... */
	{"unsigned", 0},
	{"void", 0},
	{"volatile", 0},
	{"while", 0},
};

/** Ex. 4-4 */
/** size of buffer for getch/ungetch */
#define BUFSIZE 100
/** buffer for ungetch */
char buf[BUFSIZE];
/** next free position in buf */
int  bufp = 0;

/** get a (possibly pushed back) character */
int getch(void) {
	return (bufp > 0) ? buf[--bufp] : getchar();
}

/** push character back on input */
void ungetch(int c) {
	if (bufp >= BUFSIZE)
		printf("ungetch: too many characters\n");
	else
		buf[bufp++] = c;
}

/** like Ex. 3-01 */
struct key *binsearch(char *word, struct key *tab, int n)
{
	int cond;
//	int low, high, mid;
	struct key *low = &tab[0];
	struct key *high = &tab[n];
	struct key *mid;

//	low = 0;
//	high = n - 1;
//	while (low <= high) {
//		mid = (low+high) / 2;
	while (low < high) {
		/** Warning: pointers cannot be summarized! so middle is calculated below: */
		mid = low + (high-low)/2;
//		if ((cond = strcmp(word, tab[mid].word)) < 0)
//			high = mid - 1;
		if ((cond = strcmp(word, mid->word)) < 0)
			high = mid;
		else if (cond > 0)
			low = mid + 1;
		else
			return mid;
	}
	/** no match */
//	return -1;
	return NULL;
}

int getword(char *word, int lim)
{
	int c, getch(void);
	void ungetch(int);
	char *w = word;

	while (isspace(c = getch()))
		;
	if (c != EOF)
		*w++ = c;
	if (!isalpha(c)) {
		*w = '\0';
		return c;
	}
	for ( ; --lim > 0; w++) {
		if (!isalnum(*w = getch())) {
			ungetch(*w);
			break;
		}
	}
	*w = '\0';
	return word[0];
}

int main (void) {
//	int n;
	char word[MAXWORD];
	struct key *p;

	while (getword(word, MAXWORD) != EOF)
		if (isalpha(word[0]))
//			if ((n = binsearch(word, keytab, NKEYS)) >= 0)
//				keytab[n].count++;
			if ((p = binsearch(word, keytab, NKEYS)) != NULL)
				p->count++;
//	for (n = 0; n < NKEYS; n++)
//		if (keytab[n].count > 0)
//			printf("%4d %s\n",
//			       keytab[n].count, keytab[n].word);
	for (p = keytab; p < keytab + NKEYS; p++)
		if (p->count > 0)
			printf("%4d %s\n", p->count, p->word);
	return 0;
}
